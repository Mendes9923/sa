}
a = 5
while(a <= 10)
{
print(a)
a = a+1
}
a = 8
while(a <= 10)
{
print(a)
a = a+1
}
a = -2
while(a <= 10)
{
print(a)
a = a+1
}
a = 5
while(a <= 10)
{
print(a)
a = a+1
}
parouimpar <- function(x) {
return(ifelse(x%%2==0,"Par","impar"))
}
parouimpar(5)
parouimpar(12)
Ana=8L
Paulo=12L
if (Ana > Paulo)
print("A menina é mais velha")else
print("O menino é mais velho")
class(BOD)
class(BOD)
numeros = c(1,2,3,4,5,6,7,8,9,10)
for (i in numeros) {
if (numeros[i]%%2==0)
print(numeros[i])
}
numeros = c(1,2,3,4,5,6,7,8,9,10)
numeros = c(1,2,3,4,5,6,7,8,9,10)
for (i in numeros) {
if (numeros[i]%%2==0)
print(numeros[i])
}
numeros = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
for (i in numeros) {
if (numeros[i]%%2==0)
print(numeros[i])
}
numeros = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
for (i in numeros) {
if (numeros[i]%%1==0)
print(numeros[i])
}
numeros = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
for (i in numeros) {
if (numeros[i]%%3==0)
print(numeros[i])
}
numeros = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
for (i in numeros) {
if (numeros[i]%%0==0)
print(numeros[i])
}
numeros = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
for (i in numeros) {
if (numeros[i]%%2==0)
print(numeros[i])
}
tail(women, n=10)
novairis = iris[50:100,c(2,3)]
plot(novairis)
vet1 = c(1,2,3,4)
vet2 = c(4,3,2,1)
print(vet1 + vet2)
vet1 = c(1,2,3,4,5)
vet2 = c(4,3,2,1,5)
print(vet1 + vet2)
dim(CO2)[1]
dim(CO2)[2]
rownames(CO2)
colnames(CO2)
head(dados)
#importa dados, string vazio como NA, string como fatores
dados = read.csv("C:\Users\Daniel Mendes\Documents\Arquivos Cientista de dados\FormacaoCD\9.Prática em R\dados\Churn.csv", sep = ";", na.strings="", stringsAsFactors=T)
#install.packages("openxlsx")
library(openxlsx)
#texto
x = read.csv(file.choose(),header = TRUE, sep = ",")
#importa dados, string vazio como NA, string como fatores
dados = read.csv("Churn.csv", sep = ";", na.strings="", stringsAsFactors=T)
head(dados)
summary(dados)
#Dar nomes corretos as colunas
colnames(dados) = c("Id","Score","Estado","Genero","Idade","Patrimonio","Saldo","Produtos","TemCartCredito","Ativo","Salario","Saiu")
head(dados)
```{r}
#importa dados, string vazio como NA, string como fatores
dados = read.csv("Churn.csv", sep = ";", na.strings="", stringsAsFactors=T)
#importa dados, string vazio como NA, string como fatores
dados = read.csv("Churn.csv", sep = ";", na.strings="", stringsAsFactors=T)
head(dados)
summary(dados)
```{r}
#Dar nomes corretos as colunas
colnames(dados) = c("Id","Score","Estado","Genero","Idade","Patrimonio","Saldo","Produtos","TemCartCredito","Ativo","Salario","Saiu")
head(dados)
#Estados
counts = table(dados$Estado)
barplot(counts, main="Estados", xlab="Estados")
#Gênero
counts = table(dados$Genero)
barplot(counts, main="Gêneros", xlab="Gêneros")
head(dados)
View(dados)
View(dados)
#Score
summary(dados$Score)
boxplot(dados$Score)
hist(dados$Score)
summary(dados$Idade)
boxplot(dados$Idade)
summary(dados$Saldo)
boxplot(dados$Saldo)
hist(dados$Saldo)
summary(dados$Salario)
boxplot(dados$Salario)
boxplot(dados$Salario,outline = F)
```{r}
#valores faltantes NAs
dados[!complete.cases(dados),]
#tratar salários
summary(dados$Salario)
#ver mediana
median(dados$Salario,na.rm = T)
#atribuir mediana a NAs
dados[is.na(dados$Salario),]$Salario = median(dados$Salario,na.rm = T)
#atribuir mediana a NAs
dados[is.na(dados$Salario),]$Salario = median(dados$Salario,na.rm = T)
#ver mediana
median(dados$Salario,na.rm = T)
#atribuir mediana a NAs
dados[is.na(dados$Salario),]$Salario = median(dados$Salario,na.rm = T)
#buscar NAS em salario para checar
dados[!complete.cases(dados$Salario),]
#Ver valores
unique(dados$Genero)
summary(dados$Genero)
#tranformar F e Fem em Feminino
# "" , M em Masculino (moda)
dados[is.na(dados$Genero) | dados$Genero == "M" ,]$Genero = "Masculino"
dados[dados$Genero == "F" | dados$Genero == "Fem", ]$Genero = "Feminino"
#ver resultado
summary(dados$Genero)
#remover levels não utilizados
dados$Genero =   factor(dados$Genero)
#visualizar novamente
summary(dados$Genero)
summary(dados$Idade)
#fora do dominio, numérico - ver idades anormais
dados[dados$Idade<0 | dados$Idade>110 ,]$Idade
#não temos idade NAs
dados[is.na(dados$Idade),]
#opção, preencher com mediana
median(dados$Idade)
#subtituição
dados[dados$Idade<0 | dados$Idade>110 ,]$Idade = median(dados$Idade)
#buscamos novamente idades anormais
dados[dados$Idade<0 | dados$Idade>110 ,]
summary(dados$Idade)
#importa dados, string vazio como NA, string como fatores
dados = read.csv("Churn.csv", sep = ";", na.strings="", stringsAsFactors=T)
#importa dados, string vazio como NA, string como fatores
dados = read.csv("Churn.csv", sep = ";", na.strings="", stringsAsFactors=T)
head(dados)
summary(dados)
#Dar nomes corretos as colunas
colnames(dados) = c("Id","Score","Estado","Genero","Idade","Patrimonio","Saldo","Produtos","TemCartCredito","Ativo","Salario","Saiu")
head(dados)
#Estados
counts = table(dados$Estado)
barplot(counts, main="Estados", xlab="Estados")
#Gênero
counts = table(dados$Genero)
barplot(counts, main="Gêneros", xlab="Gêneros")
#Score
summary(dados$Score)
boxplot(dados$Score)
hist(dados$Score)
summary(dados$Idade)
boxplot(dados$Idade)
hist(dados$Idade)
summary(dados$Saldo)
boxplot(dados$Saldo)
hist(dados$Saldo)
summary(dados$Salario)
boxplot(dados$Salario)
boxplot(dados$Salario,outline = F)
#valores faltantes NAs
dados[!complete.cases(dados),]
#tratar salários
summary(dados$Salario)
#ver mediana
median(dados$Salario,na.rm = T)
#atribuir mediana a NAs
dados[is.na(dados$Salario),]$Salario = median(dados$Salario,na.rm = T)
#buscar NAS em salario para checar
dados[!complete.cases(dados$Salario),]
#Ver valores
unique(dados$Genero)
summary(dados$Genero)
#tranformar F e Fem em Feminino
# "" , M em Masculino (moda)
dados[is.na(dados$Genero) | dados$Genero == "M" ,]$Genero = "Masculino"
dados[dados$Genero == "F" | dados$Genero == "Fem", ]$Genero = "Feminino"
#ver resultado
summary(dados$Genero)
#remover levels não utilizados
dados$Genero =   factor(dados$Genero)
#visualizar novamente
summary(dados$Genero)
summary(dados$Idade)
#fora do dominio, numérico - ver idades anormais
dados[dados$Idade<0 | dados$Idade>110 ,]$Idade
#não temos idade NAs
dados[is.na(dados$Idade),]
#opção, preencher com mediana
median(dados$Idade)
#subtituição
dados[dados$Idade<0 | dados$Idade>110 ,]$Idade = median(dados$Idade)
#buscamos novamente idades anormais
dados[dados$Idade<0 | dados$Idade>110 ,]
summary(dados$Idade)
#buscar duplicados pelo ID
x =  dados[duplicated(dados$Id),]
x
#verificamos que o ID 81 está duplicado
#vamos excluir pelo indice 82
dados = dados[-c(82),]
#buscamos a linha que estava duplicada
dados[dados$Id == x$Id ,]
#verificamos novamente duplicados
x =  dados[duplicated(dados$Id),]
x
#buscar duplicados pelo ID
x =  dados[duplicated(dados$Id),]
x
#verificamos que o ID 81 está duplicado
#vamos excluir pelo indice 82
dados = dados[-c(82),]
#buscamos a linha que estava duplicada
dados[dados$Id == x$Id ,]
#verificamos novamente duplicados
x =  dados[duplicated(dados$Id),]
x
#buscar duplicados pelo ID
x =  dados[duplicated(dados$Id),]
View(dados)
#buscar duplicados pelo ID
x =  dados[duplicated(dados$Id),]
x
#verificamos que o ID 81 está duplicado
#vamos excluir pelo indice 82
dados = dados[-c(82),]
#buscamos a linha que estava duplicada
dados[dados$Id == x$Id ,]
#verificamos novamente duplicados
x =  dados[duplicated(dados$Id),]
x
#fora do dominio - categorico
unique(dados$Estado)
summary(dados$Estado)
#preencher com a moda, RS
dados[!dados$Estado %in% c("RS","SC","PR"),]$Estado = "RS"
summary(dados$Estado)
#removemos fatores não usados
dados$Estado =   factor(dados$Estado)
#visualizar novamente
summary(dados$Estado)
#outliers, criando um parametro com desvio padrão
desv = sd(dados$Salario, na.rm = T)
desv
dados[dados$Salario >= 2 *desv  , ]$Salario
#outra forma, resultado semelhante, mas sem os NAs
boxplot(dados$Salario)
boxplot(dados$Salario, outline = F)
x = boxplot(dados$Salario)$out
x
#atualizamos todos para mediana
median(dados$Salario)
dados[dados$Salario >= 2 *desv  , ]$Salario = median(dados$Salario)
#checamos se sairam os outliers
dados[dados$Salario >= 2 *desv  , ]$Salario
trees
hist( trees$Height)
hist( trees$Height,  main="Árvores", ylab="Frequência",xlab="Altura", col="blue")
hist( trees$Height,  main="Árvores", ylab="Frequência",xlab="Altura", col="blue",
density=20, breaks=20    )
densidade = density(trees$Height)
plot(densidade)
#Executar com ctrl+shift+enter
hist(trees$Height, main=NULL, xlab=NULL, ylab = NULL)
par(new=TRUE)
plot(densidade)
#Executar com ctrl+shift+enter
hist(trees$Height, main=NULL, xlab=NULL, ylab = NULL)
par(new=TRUE)
plot(densidade)
plot(trees$Girth, trees$Volume)
plot(trees$Girth, trees$Volume, main="Árvores")
plot(trees$Girth, trees$Volume, ylab="Cirunferência", xlab="Volume", col="blue", main="Árvores")
#pch muda o elementog gráfico
plot(trees$Girth, trees$Volume, ylab="Cirunferência", xlab="Volume", col="blue", main="Árvores", pch=20)
#pch muda o elementog gráfico
plot(trees$Girth, trees$Volume, ylab="Cirunferência", xlab="Volume", col="blue", main="Árvores", pch=10)
#pch muda o elementog gráfico
plot(trees$Girth, trees$Volume, ylab="Cirunferência", xlab="Volume", col="blue", main="Árvores", pch=100)
#pch muda o elementog gráfico
plot(trees$Girth, trees$Volume, ylab="Cirunferência", xlab="Volume", col="blue", main="Árvores", pch=20)
plot(trees$Girth, trees$Volume, ylab="Cirunferência", xlab="Volume", col="blue", main="Árovres", pch=20, type="l")
plot(jitter(trees$Girth), trees$Volume, ylab="Cirunferência", xlab="Volume", col="blue", main="Árvores")
plot(CO2$conc, CO2$uptake,pch=20, col= CO2$Treatment)
plot(CO2$conc, CO2$uptake,pch=20, col= CO2$Treatment)
#"bottom", "bottomleft", "left", "topleft", "top", "topright", "right" and "center"
legend("bottomright",legend=c("nonchilled","chilled"),cex=1, fill=c("black","red"))
plot(CO2$conc, CO2$uptake,pch=20, col= CO2$Treatment)
#"bottom", "bottomleft", "left", "topleft", "top", "topright", "right" and "center"
legend("bottomright",legend=c("nonchilled","chilled"),cex=1, fill=c("black","red"))
plot(trees)
#Executar com crtl+shift+enter
split.screen(figs=c(2,2))
screen(1)
plot(trees$Girth, trees$Volume)
screen(2)
plot(trees$Girth, trees$Height)
screen(3)
plot(trees$Height, trees$Volume)
screen(4)
hist(trees$Volume)
close.screen(all=TRUE)
View(dados)
#Executar com crtl+shift+enter
split.screen(figs=c(2,2))
screen(1)
plot(trees$Girth, trees$Volume)
screen(2)
plot(trees$Girth, trees$Height)
screen(3)
plot(trees$Height, trees$Volume)
screen(4)
hist(trees$Volume)
close.screen(all=TRUE)
```{r}
boxplot(trees$Volume, main= "Árvores", xlab = "Volume")
boxplot(trees$Volume, main= "Árvores", xlab = "Volume", col="blue", horizontal=TRUE )
boxplot(trees$Volume, main="Árvores", xlab = "Volume", col="blue",outline=F )
boxplot(trees$Volume, main= "Árvores", xlab = "Volume")
boxplot(trees$Volume, main= "Árvores", xlab = "Volume", col="blue", horizontal=TRUE )
boxplot(trees$Volume, main="Árvores", xlab = "Volume", col="blue",outline=F )
#notch
boxplot( trees$Height, main="Árvores", xlab = "Altura", col="blue",  notch=TRUE )
#dados do gráfico
boxplot.stats(trees$Height)
#lê apenas uma informação
boxplot.stats(trees$Height)$stats
boxplot(trees)
InsectSprays
spray = aggregate(. ~ spray, data=InsectSprays,sum)
spray
#Executar com ctrl+shift+enter
barplot(spray$count,col= gray.colors(6), xlab="Spray", ylab="Total", names.arg=spray$spray)
box()
InsectSprays
spray = aggregate(. ~ spray, data=InsectSprays,sum)
spray
```{r}
#notch
boxplot( trees$Height, main="Árvores", xlab = "Altura", col="blue",  notch=TRUE )
#Executar com ctrl+shift+enter
barplot(spray$count,col= gray.colors(6), xlab="Spray", ylab="Total", names.arg=spray$spray)
box()
pie(spray$count, labels= spray$spray, main="Spray",col=c(1:6))
pie(spray$count,labels=NA,  main="Spray",col=c(1:6))
legend("bottomright",legend=spray$spray ,cex=1, fill=c(1:6))
pie(spray$count, labels= spray$spray, main="Spray",col=c(1:6))
pie(spray$count,labels=NA,  main="Spray",col=c(1:6))
legend("bottomright",legend=spray$spray ,cex=1, fill=c(1:6))
install.packages("stargazer")
library(stargazer)
install.packages("stargazer")
install.packages("stargazer")
stargazer(iris)
install.packages("stargazer")
library(stargazer)
stargazer(iris)
stargazer(iris)
stargazer(iris, type="html")
stargazer(iris, type="text")
stargazer(women, out="women.tex", summary=FALSE)
#este pacote não precisa instalar!
library(lattice)
bwplot(trees$Volume)
bwplot(trees$Volume, main="Árvores",xlab="Volume")
```{r}
```{r}
histogram(trees$Volume, main="Árvores",xlab="Volume",aspect=1, type = "percent", nint=5 )
#Peso das galinhas de acordo com alimentação
chickwts
#histrograma
histogram(chickwts$weight)
#agregamos dados
aggregate(chickwts$weight, by=list(chickwts$feed), FUN=sum)
#histograma condicional
histogram( ~weight | feed, data=chickwts)
#CO2, conc: concentração de co2, uptake: captação de co2
CO2
#type é a origem
xyplot(CO2$conc ~  CO2$uptake | CO2$Type)
xyplot(CO2$conc ~  CO2$uptake)
#type é a origem
xyplot(CO2$conc ~  CO2$uptake | CO2$Type)
#regrigerado ou não
xyplot(CO2$conc ~  CO2$uptake | CO2$Treatment)
esoph
dotplot(esoph$alcgp ~ esoph$ncontrols, data=esoph)
dotplot(esoph$alcgp ~ esoph$ncontrols | esoph$tobgp)
splom(~CO2[4:5] | CO2$Type, CO2)
densityplot(~CO2$conc | CO2$Treatment, plot.points=FALSE)
densityplot(CO2$conc)
densityplot(~CO2$conc | CO2$Treatment)
densityplot(~CO2$conc | CO2$Treatment, plot.points=FALSE)
OrchardSprays
cloud(decrease ~  rowpos * colpos, data=OrchardSprays)
cloud(decrease ~  rowpos * colpos, groups=treatment, data=OrchardSprays)
trees
levelplot(Girth ~ Height * Volume, data=trees)
#paleta de cores
library("RColorBrewer")
install.packages("RColorBrewer")
#paleta de cores
library("RColorBrewer")
dados = read.csv('dados.csv', sep=";")
library(readxl)
dados <- read_excel("Arquivos Cientista de dados/FormacaoCD/12.Prática em R/dados/dados.csv")
dados = read.csv('dados.csv', sep=";")
head(dados)
dados = read.csv('dados.csv', sep=";")
View(dados)
dados = read.csv('dados.csv', sep=";")
dados = read.csv('dados.csv', sep=";")
head(dados)
dados = read.csv('dados.csv', sep=";")
dados = read.csv('dados.csv', sep=";")
```{r}
dados = read.csv('dados.csv', sep=";")
head(dados)
dados = read.csv('C:\Users\Daniel Mendes\Documents\Arquivos Cientista de dados\FormacaoCD\12.Prática em R\dados.csv', sep=";")
dados = read.csv('C:\Users\Daniel Mendes\Documents\Arquivos Cientista de dados\FormacaoCD\12.Prática em R\dados.csv', sep=";")
setwd("~/Arquivos Cientista de dados/FormacaoCD/12.Prática em R/scripts")
setwd("C:/Users/Daniel Mendes/Documents/Arquivos Cientista de dados/FormacaoCD/12.Prática em R/dados")
dados = read.csv('dados.csv', sep=";")
head(dados)
dados = read.csv('dados.csv', sep=";")
dados = read.csv('dados.csv', sep=";")
dados = read.csv('dados2.csv', sep=";")
head(dados)
#paleta de cores
library("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
#paleta de cores
library("RColorBrewer")
setwd("C:/Users/Daniel Mendes/Documents/Arquivos Cientista de dados/FormacaoCD/12.Prática em R/dados")
dados = read.csv('dados2.csv', sep=";")
dados = read.csv("/Users/Daniel Mendes/Documents/Arquivos Cientista de dados/FormacaoCD/12.Prática em R/dados/dados2.csv", sep=";")
head(dados)
```{r}
summary(dados$VALOREMPENHO)
summary(dados$PIB)
#Alguns gráficos
boxplot(dados$VALOREMPENHO, main="Valores de Empenho", col = brewer.pal(n = 3, name = "Paired"), outline = F )
boxplot(dados$PIB ,main="Valores de PIB", col = brewer.pal(n = 3, name = "Pastel1"), outline = F )
hist(dados$VALOREMPENHO,main="Valores de Empenho", col = brewer.pal(n = 3, name = "Paired"))
hist(dados$PIB,main="Valores de PIB", col = brewer.pal(n = 3, name = "Pastel1"), outline = F )
#Busca os maiores empenhos
#executar com ctrl + shif + enter
Mempenho = head(dados[order(-dados$VALOREMPENHO),],10)
barplot(Mempenho$VALOREMPENHO, col=brewer.pal(n = 10, name = "RdBu"),las=2,main = "Maiores Empenhos")
legend("topright",legend=Mempenho$MUNICIPIO,col = brewer.pal(n = 10, name = "RdBu"), lty=1:2, cex=0.8, ncol = 2,lwd=4)
box()
#Maiores Pibs
#executar com ctrl + shif + enter
Mpibs =   head(dados[order(-dados$PIB),],10)
barplot(Mpibs$PIB,col=brewer.pal(n = 10, name = "Spectral"),las=2,main = "Maiores PIBS")
legend("topright",legend=Mempenho$MUNICIPIO,col = brewer.pal(n = 10, name = "Spectral"), lty=1:2, cex=0.8, ncol = 2,lwd=4)
box()
#Relação entre PIB e empenho
#Calcula qual % de PIB foi empenhado
dados$PROPORCAO =   dados$VALOREMPENHO  / dados$PIB
Mprop = head(dados[order(-dados$PROPORCAO),],10)
barplot(Mprop$PROPORCAO,col=brewer.pal(n = 10, name = "Set2"),las=2,main = "Maiores Gastos em Proporção ao PIB")
legend("topright",legend=Mprop$MUNICIPIO,col = brewer.pal(n = 10, name = "Set2"), lty=1:2, cex=0.8, ncol = 2,lwd=4)
box()
#Relação entre PIB e empenho
#Calcula qual % de PIB foi empenhado
dados$PROPORCAO =   dados$VALOREMPENHO  / dados$PIB
Mprop = head(dados[order(-dados$PROPORCAO),],10)
barplot(Mprop$PROPORCAO,col=brewer.pal(n = 10, name = "Set2"),las=2,main = "Maiores Gastos em Proporção ao PIB")
